{"ast":null,"code":"/**\n * @import {HtmlOptions as Options} from 'micromark-extension-math'\n * @import {HtmlExtension} from 'micromark-util-types'\n */\n\nimport katex from 'katex';\nconst renderToString = katex.renderToString;\n\n/**\n * Create an extension for `micromark` to support math when serializing to\n * HTML.\n *\n * > ðŸ‘‰ **Note**: this uses KaTeX to render math.\n *\n * @param {Options | null | undefined} [options={}]\n *   Configuration (default: `{}`).\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions`, to\n *   support math when serializing to HTML.\n */\nexport function mathHtml(options) {\n  return {\n    enter: {\n      mathFlow() {\n        this.lineEndingIfNeeded();\n        this.tag('<div class=\"math math-display\">');\n      },\n      mathFlowFenceMeta() {\n        this.buffer();\n      },\n      mathText() {\n        // Double?\n        this.tag('<span class=\"math math-inline\">');\n        this.buffer();\n      }\n    },\n    exit: {\n      mathFlow() {\n        const value = this.resume();\n        this.tag(math(value.replace(/(?:\\r?\\n|\\r)$/, ''), true));\n        this.tag('</div>');\n        this.setData('mathFlowOpen');\n        this.setData('slurpOneLineEnding');\n      },\n      mathFlowFence() {\n        // After the first fence.\n        if (!this.getData('mathFlowOpen')) {\n          this.setData('mathFlowOpen', true);\n          this.setData('slurpOneLineEnding', true);\n          this.buffer();\n        }\n      },\n      mathFlowFenceMeta() {\n        this.resume();\n      },\n      mathFlowValue(token) {\n        this.raw(this.sliceSerialize(token));\n      },\n      mathText() {\n        const value = this.resume();\n        this.tag(math(value, false));\n        this.tag('</span>');\n      },\n      mathTextData(token) {\n        this.raw(this.sliceSerialize(token));\n      }\n    }\n  };\n\n  /**\n   * @param {string} value\n   *   Math text.\n   * @param {boolean} displayMode\n   *   Whether the math is in display mode.\n   * @returns {string}\n   *   HTML.\n   */\n  function math(value, displayMode) {\n    return renderToString(value, {\n      ...options,\n      displayMode\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}