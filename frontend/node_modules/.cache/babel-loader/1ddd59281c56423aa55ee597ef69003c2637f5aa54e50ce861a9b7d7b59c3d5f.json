{"ast":null,"code":"var _jsxFileName = \"/Users/wang-work/matagent/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ChatSidebar from './components/ChatSidebar';\nimport ChatWindow from './components/ChatWindow';\nimport { Box } from '@mui/material';\n// import './App.css'; // Removed as MUI will handle styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [conversations, setConversations] = useState([]);\n  const [activeConversationId, setActiveConversationId] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Load conversations from localStorage on mount\n  useEffect(() => {\n    let parsedConversations = [];\n    try {\n      const savedConversations = localStorage.getItem('bioagen_conversations');\n      if (savedConversations) {\n        parsedConversations = JSON.parse(savedConversations);\n      }\n    } catch (error) {\n      console.error(\"Error parsing conversations from localStorage, clearing it.\", error);\n      localStorage.removeItem('bioagen_conversations');\n      parsedConversations = [];\n    }\n    if (parsedConversations.length > 0) {\n      setConversations(parsedConversations);\n      setActiveConversationId(parsedConversations[0].id);\n    } else {\n      // If no conversations found or parsing failed, create a new one automatically\n      createNewConversation();\n    }\n  }, []);\n\n  // Save conversations to localStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem('bioagen_conversations', JSON.stringify(conversations));\n  }, [conversations]);\n  const createNewConversation = () => {\n    const newConversation = {\n      id: Date.now().toString(),\n      title: '新对话',\n      messages: [],\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    setConversations(prev => [newConversation, ...prev]);\n    setActiveConversationId(newConversation.id);\n  };\n  const updateConversationTitle = (conversationId, title) => {\n    setConversations(prev => prev.map(conv => conv.id === conversationId ? {\n      ...conv,\n      title,\n      updatedAt: new Date().toISOString()\n    } : conv));\n  };\n  const addMessage = (conversationId, message) => {\n    setConversations(prev => prev.map(conv => conv.id === conversationId ? {\n      ...conv,\n      messages: [...conv.messages, message],\n      updatedAt: new Date().toISOString()\n    } : conv));\n  };\n  const deleteConversation = conversationId => {\n    setConversations(prev => {\n      const filtered = prev.filter(conv => conv.id !== conversationId);\n      if (activeConversationId === conversationId) {\n        setActiveConversationId(filtered.length > 0 ? filtered[0].id : null);\n      }\n      return filtered;\n    });\n  };\n  const updateConversationUuid = (conversationId, uuid) => {\n    setConversations(prev => prev.map(conv => conv.id === conversationId ? {\n      ...conv,\n      uuid,\n      updatedAt: new Date().toISOString()\n    } : conv));\n  };\n  const activeConversation = conversations.find(conv => conv.id === activeConversationId);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: 'flex',\n      height: '100vh',\n      width: '100vw',\n      overflow: 'hidden'\n    },\n    children: [/*#__PURE__*/_jsxDEV(ChatSidebar, {\n      conversations: conversations,\n      activeConversationId: activeConversationId,\n      onSelectConversation: setActiveConversationId,\n      onNewConversation: createNewConversation,\n      onDeleteConversation: deleteConversation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatWindow, {\n      conversation: activeConversation,\n      onSendMessage: addMessage,\n      onUpdateTitle: updateConversationTitle,\n      isLoading: isLoading,\n      setIsLoading: setIsLoading,\n      onUpdateConversationUuid: updateConversationUuid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"YIZp0b1UDik5bS1zphEs8PvnLe0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ChatSidebar","ChatWindow","Box","jsxDEV","_jsxDEV","App","_s","conversations","setConversations","activeConversationId","setActiveConversationId","isLoading","setIsLoading","parsedConversations","savedConversations","localStorage","getItem","JSON","parse","error","console","removeItem","length","id","createNewConversation","setItem","stringify","newConversation","Date","now","toString","title","messages","createdAt","toISOString","updatedAt","prev","updateConversationTitle","conversationId","map","conv","addMessage","message","deleteConversation","filtered","filter","updateConversationUuid","uuid","activeConversation","find","sx","display","height","width","overflow","children","onSelectConversation","onNewConversation","onDeleteConversation","fileName","_jsxFileName","lineNumber","columnNumber","conversation","onSendMessage","onUpdateTitle","onUpdateConversationUuid","_c","$RefreshReg$"],"sources":["/Users/wang-work/matagent/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ChatSidebar from './components/ChatSidebar';\nimport ChatWindow from './components/ChatWindow';\nimport { Box } from '@mui/material';\n// import './App.css'; // Removed as MUI will handle styling\n\nfunction App() {\n  const [conversations, setConversations] = useState([]);\n  const [activeConversationId, setActiveConversationId] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Load conversations from localStorage on mount\n  useEffect(() => {\n    let parsedConversations = [];\n    try {\n      const savedConversations = localStorage.getItem('bioagen_conversations');\n      if (savedConversations) {\n        parsedConversations = JSON.parse(savedConversations);\n      }\n    } catch (error) {\n      console.error(\"Error parsing conversations from localStorage, clearing it.\", error);\n      localStorage.removeItem('bioagen_conversations');\n      parsedConversations = [];\n    }\n\n    if (parsedConversations.length > 0) {\n      setConversations(parsedConversations);\n      setActiveConversationId(parsedConversations[0].id);\n    } else {\n      // If no conversations found or parsing failed, create a new one automatically\n      createNewConversation();\n    }\n  }, []);\n\n  // Save conversations to localStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem('bioagen_conversations', JSON.stringify(conversations));\n  }, [conversations]);\n\n  const createNewConversation = () => {\n    const newConversation = {\n      id: Date.now().toString(),\n      title: '新对话',\n      messages: [],\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    \n    setConversations(prev => [newConversation, ...prev]);\n    setActiveConversationId(newConversation.id);\n  };\n\n  const updateConversationTitle = (conversationId, title) => {\n    setConversations(prev => prev.map(conv => \n      conv.id === conversationId \n        ? { ...conv, title, updatedAt: new Date().toISOString() }\n        : conv\n    ));\n  };\n\n  const addMessage = (conversationId, message) => {\n    setConversations(prev => prev.map(conv => \n      conv.id === conversationId \n        ? { \n            ...conv, \n            messages: [...conv.messages, message],\n            updatedAt: new Date().toISOString()\n          }\n        : conv\n    ));\n  };\n\n  const deleteConversation = (conversationId) => {\n    setConversations(prev => {\n      const filtered = prev.filter(conv => conv.id !== conversationId);\n      if (activeConversationId === conversationId) {\n        setActiveConversationId(filtered.length > 0 ? filtered[0].id : null);\n      }\n      return filtered;\n    });\n  };\n\n  const updateConversationUuid = (conversationId, uuid) => {\n    setConversations(prev => prev.map(conv => \n      conv.id === conversationId \n        ? { ...conv, uuid, updatedAt: new Date().toISOString() }\n        : conv\n    ));\n  };\n\n  const activeConversation = conversations.find(conv => conv.id === activeConversationId);\n\n  return (\n    <Box sx={{\n      display: 'flex',\n      height: '100vh',\n      width: '100vw',\n      overflow: 'hidden',\n    }}>\n      <ChatSidebar\n        conversations={conversations}\n        activeConversationId={activeConversationId}\n        onSelectConversation={setActiveConversationId}\n        onNewConversation={createNewConversation}\n        onDeleteConversation={deleteConversation}\n      />\n      <ChatWindow\n        conversation={activeConversation}\n        onSendMessage={addMessage}\n        onUpdateTitle={updateConversationTitle}\n        isLoading={isLoading}\n        setIsLoading={setIsLoading}\n        onUpdateConversationUuid={updateConversationUuid}\n      />\n    </Box>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}