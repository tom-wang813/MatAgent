{"ast":null,"code":"export const sendMessage = (message, conversationId, onNewStep, onError, onOpen) => {\n  const backendUrl = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8000/api';\n  const traceId = `trace-${Date.now()}-${Math.random().toString(36).substring(2, 15)}`;\n\n  // Construct URL with query parameters for GET request with EventSource\n  // Handle relative URLs properly\n  let fullUrl;\n  if (backendUrl.startsWith('http')) {\n    fullUrl = `${backendUrl}/chat`;\n  } else {\n    // For relative URLs like '/api', construct full URL based on current location\n    fullUrl = `${window.location.protocol}//${window.location.host}${backendUrl}/chat`;\n  }\n  const url = new URL(fullUrl);\n  url.searchParams.append('message', message);\n  if (conversationId) {\n    url.searchParams.append('conversation_uuid', conversationId);\n  }\n  // EventSource does not support custom headers directly for GET requests.\n  // If X-Trace-ID is critical, it needs to be passed as a query parameter or handled differently.\n  // For now, we'll omit it as it's primarily for backend logging.\n\n  const eventSource = new EventSource(url.toString());\n  eventSource.onopen = () => {\n    console.log('SSE connection opened.');\n    if (onOpen) onOpen();\n  };\n  eventSource.onmessage = event => {\n    if (event.data) {\n      try {\n        const step = JSON.parse(event.data);\n        onNewStep(step);\n      } catch (e) {\n        console.error('Error parsing SSE message:', e, 'Data:', event.data);\n        if (onError) onError(e);\n      }\n    }\n  };\n  eventSource.onerror = err => {\n    console.error('SSE error:', err);\n    eventSource.close();\n    if (onError) onError(err);\n  };\n\n  // Return the EventSource instance so it can be closed by the caller if needed\n  return eventSource;\n};","map":{"version":3,"names":["sendMessage","message","conversationId","onNewStep","onError","onOpen","backendUrl","process","env","REACT_APP_BACKEND_URL","traceId","Date","now","Math","random","toString","substring","fullUrl","startsWith","window","location","protocol","host","url","URL","searchParams","append","eventSource","EventSource","onopen","console","log","onmessage","event","data","step","JSON","parse","e","error","onerror","err","close"],"sources":["/Users/wang-work/matagent/frontend/src/utils/api.js"],"sourcesContent":["export const sendMessage = (message, conversationId, onNewStep, onError, onOpen) => {\n  const backendUrl = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8000/api';\n  const traceId = `trace-${Date.now()}-${Math.random().toString(36).substring(2, 15)}`;\n\n  // Construct URL with query parameters for GET request with EventSource\n  // Handle relative URLs properly\n  let fullUrl;\n  if (backendUrl.startsWith('http')) {\n    fullUrl = `${backendUrl}/chat`;\n  } else {\n    // For relative URLs like '/api', construct full URL based on current location\n    fullUrl = `${window.location.protocol}//${window.location.host}${backendUrl}/chat`;\n  }\n  \n  const url = new URL(fullUrl);\n  url.searchParams.append('message', message);\n  if (conversationId) {\n    url.searchParams.append('conversation_uuid', conversationId);\n  }\n  // EventSource does not support custom headers directly for GET requests.\n  // If X-Trace-ID is critical, it needs to be passed as a query parameter or handled differently.\n  // For now, we'll omit it as it's primarily for backend logging.\n\n  const eventSource = new EventSource(url.toString());\n\n  eventSource.onopen = () => {\n    console.log('SSE connection opened.');\n    if (onOpen) onOpen();\n  };\n\n  eventSource.onmessage = (event) => {\n    if (event.data) {\n      try {\n        const step = JSON.parse(event.data);\n        onNewStep(step);\n      } catch (e) {\n        console.error('Error parsing SSE message:', e, 'Data:', event.data);\n        if (onError) onError(e);\n      }\n    }\n  };\n\n  eventSource.onerror = (err) => {\n    console.error('SSE error:', err);\n    eventSource.close();\n    if (onError) onError(err);\n  };\n\n  // Return the EventSource instance so it can be closed by the caller if needed\n  return eventSource;\n};\n"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAGA,CAACC,OAAO,EAAEC,cAAc,EAAEC,SAAS,EAAEC,OAAO,EAAEC,MAAM,KAAK;EAClF,MAAMC,UAAU,GAAGC,OAAO,CAACC,GAAG,CAACC,qBAAqB,IAAI,2BAA2B;EACnF,MAAMC,OAAO,GAAG,SAASC,IAAI,CAACC,GAAG,CAAC,CAAC,IAAIC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE;;EAEpF;EACA;EACA,IAAIC,OAAO;EACX,IAAIX,UAAU,CAACY,UAAU,CAAC,MAAM,CAAC,EAAE;IACjCD,OAAO,GAAG,GAAGX,UAAU,OAAO;EAChC,CAAC,MAAM;IACL;IACAW,OAAO,GAAG,GAAGE,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAKF,MAAM,CAACC,QAAQ,CAACE,IAAI,GAAGhB,UAAU,OAAO;EACpF;EAEA,MAAMiB,GAAG,GAAG,IAAIC,GAAG,CAACP,OAAO,CAAC;EAC5BM,GAAG,CAACE,YAAY,CAACC,MAAM,CAAC,SAAS,EAAEzB,OAAO,CAAC;EAC3C,IAAIC,cAAc,EAAE;IAClBqB,GAAG,CAACE,YAAY,CAACC,MAAM,CAAC,mBAAmB,EAAExB,cAAc,CAAC;EAC9D;EACA;EACA;EACA;;EAEA,MAAMyB,WAAW,GAAG,IAAIC,WAAW,CAACL,GAAG,CAACR,QAAQ,CAAC,CAAC,CAAC;EAEnDY,WAAW,CAACE,MAAM,GAAG,MAAM;IACzBC,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;IACrC,IAAI1B,MAAM,EAAEA,MAAM,CAAC,CAAC;EACtB,CAAC;EAEDsB,WAAW,CAACK,SAAS,GAAIC,KAAK,IAAK;IACjC,IAAIA,KAAK,CAACC,IAAI,EAAE;MACd,IAAI;QACF,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACJ,KAAK,CAACC,IAAI,CAAC;QACnC/B,SAAS,CAACgC,IAAI,CAAC;MACjB,CAAC,CAAC,OAAOG,CAAC,EAAE;QACVR,OAAO,CAACS,KAAK,CAAC,4BAA4B,EAAED,CAAC,EAAE,OAAO,EAAEL,KAAK,CAACC,IAAI,CAAC;QACnE,IAAI9B,OAAO,EAAEA,OAAO,CAACkC,CAAC,CAAC;MACzB;IACF;EACF,CAAC;EAEDX,WAAW,CAACa,OAAO,GAAIC,GAAG,IAAK;IAC7BX,OAAO,CAACS,KAAK,CAAC,YAAY,EAAEE,GAAG,CAAC;IAChCd,WAAW,CAACe,KAAK,CAAC,CAAC;IACnB,IAAItC,OAAO,EAAEA,OAAO,CAACqC,GAAG,CAAC;EAC3B,CAAC;;EAED;EACA,OAAOd,WAAW;AACpB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}