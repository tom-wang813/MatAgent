{"ast":null,"code":"export const sendMessage = (message, conversationId, onNewStep, onError, onOpen) => {\n  const backendUrl = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8000/api';\n\n  // Construct URL with query parameters for GET request with EventSource\n  // Handle relative URLs properly\n  let fullUrl;\n  if (backendUrl.startsWith('http')) {\n    fullUrl = `${backendUrl}/chat`;\n  } else {\n    // For relative URLs like '/api', construct full URL based on current location\n    fullUrl = `${window.location.protocol}//${window.location.host}${backendUrl}/chat`;\n  }\n  let url;\n  try {\n    url = new URL(fullUrl);\n  } catch (error) {\n    console.error('Failed to construct URL from:', fullUrl, 'Error:', error);\n    if (onError) onError(new Error(`Invalid URL: ${fullUrl}`));\n    return;\n  }\n  url.searchParams.append('message', message);\n  if (conversationId) {\n    url.searchParams.append('conversation_uuid', conversationId);\n  }\n  // EventSource does not support custom headers directly for GET requests.\n  // If X-Trace-ID is critical, it needs to be passed as a query parameter or handled differently.\n  // For now, we'll omit it as it's primarily for backend logging.\n\n  const eventSource = new EventSource(url.toString());\n  eventSource.onopen = () => {\n    console.log('SSE connection opened.');\n    if (onOpen) onOpen();\n  };\n  eventSource.onmessage = event => {\n    console.log('SSE message received:', event.data); // Debug log\n    if (event.data) {\n      try {\n        const step = JSON.parse(event.data);\n        console.log('Parsed SSE step:', step); // Debug log\n        onNewStep(step);\n      } catch (e) {\n        console.error('Error parsing SSE message:', e, 'Data:', event.data);\n        // Don't trigger error for parsing issues, just log them\n        // if (onError) onError(e);\n      }\n    }\n  };\n  eventSource.onerror = err => {\n    console.error('SSE error:', err);\n    eventSource.close();\n\n    // Create a more descriptive error based on the readyState\n    let errorMessage = 'SSE連接錯誤，請檢查網絡連接';\n    if (eventSource.readyState === EventSource.CONNECTING) {\n      errorMessage = '正在嘗試連接服務器...';\n    } else if (eventSource.readyState === EventSource.CLOSED) {\n      errorMessage = '與服務器的連接已關閉，請重試';\n    } else {\n      // Check if it's a network error or server error\n      if (err.target && err.target.readyState === EventSource.CLOSED) {\n        errorMessage = '服務器連接中斷，請檢查服務器狀態';\n      } else {\n        errorMessage = '網絡連接錯誤，請檢查網絡設置';\n      }\n    }\n    const error = new Error(errorMessage);\n    if (onError) onError(error);\n  };\n\n  // Return the EventSource instance so it can be closed by the caller if needed\n  return eventSource;\n};","map":{"version":3,"names":["sendMessage","message","conversationId","onNewStep","onError","onOpen","backendUrl","process","env","REACT_APP_BACKEND_URL","fullUrl","startsWith","window","location","protocol","host","url","URL","error","console","Error","searchParams","append","eventSource","EventSource","toString","onopen","log","onmessage","event","data","step","JSON","parse","e","onerror","err","close","errorMessage","readyState","CONNECTING","CLOSED","target"],"sources":["/Users/wang-work/matagent/frontend/src/utils/api.js"],"sourcesContent":["export const sendMessage = (message, conversationId, onNewStep, onError, onOpen) => {\n  const backendUrl = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8000/api';\n\n  // Construct URL with query parameters for GET request with EventSource\n  // Handle relative URLs properly\n  let fullUrl;\n  if (backendUrl.startsWith('http')) {\n    fullUrl = `${backendUrl}/chat`;\n  } else {\n    // For relative URLs like '/api', construct full URL based on current location\n    fullUrl = `${window.location.protocol}//${window.location.host}${backendUrl}/chat`;\n  }\n  \n  let url;\n  try {\n    url = new URL(fullUrl);\n  } catch (error) {\n    console.error('Failed to construct URL from:', fullUrl, 'Error:', error);\n    if (onError) onError(new Error(`Invalid URL: ${fullUrl}`));\n    return;\n  }\n  url.searchParams.append('message', message);\n  if (conversationId) {\n    url.searchParams.append('conversation_uuid', conversationId);\n  }\n  // EventSource does not support custom headers directly for GET requests.\n  // If X-Trace-ID is critical, it needs to be passed as a query parameter or handled differently.\n  // For now, we'll omit it as it's primarily for backend logging.\n\n  const eventSource = new EventSource(url.toString());\n\n  eventSource.onopen = () => {\n    console.log('SSE connection opened.');\n    if (onOpen) onOpen();\n  };\n\n  eventSource.onmessage = (event) => {\n    console.log('SSE message received:', event.data); // Debug log\n    if (event.data) {\n      try {\n        const step = JSON.parse(event.data);\n        console.log('Parsed SSE step:', step); // Debug log\n        onNewStep(step);\n      } catch (e) {\n        console.error('Error parsing SSE message:', e, 'Data:', event.data);\n        // Don't trigger error for parsing issues, just log them\n        // if (onError) onError(e);\n      }\n    }\n  };\n\n  eventSource.onerror = (err) => {\n    console.error('SSE error:', err);\n    eventSource.close();\n    \n    // Create a more descriptive error based on the readyState\n    let errorMessage = 'SSE連接錯誤，請檢查網絡連接';\n    \n    if (eventSource.readyState === EventSource.CONNECTING) {\n      errorMessage = '正在嘗試連接服務器...';\n    } else if (eventSource.readyState === EventSource.CLOSED) {\n      errorMessage = '與服務器的連接已關閉，請重試';\n    } else {\n      // Check if it's a network error or server error\n      if (err.target && err.target.readyState === EventSource.CLOSED) {\n        errorMessage = '服務器連接中斷，請檢查服務器狀態';\n      } else {\n        errorMessage = '網絡連接錯誤，請檢查網絡設置';\n      }\n    }\n    \n    const error = new Error(errorMessage);\n    if (onError) onError(error);\n  };\n\n  // Return the EventSource instance so it can be closed by the caller if needed\n  return eventSource;\n};\n"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAGA,CAACC,OAAO,EAAEC,cAAc,EAAEC,SAAS,EAAEC,OAAO,EAAEC,MAAM,KAAK;EAClF,MAAMC,UAAU,GAAGC,OAAO,CAACC,GAAG,CAACC,qBAAqB,IAAI,2BAA2B;;EAEnF;EACA;EACA,IAAIC,OAAO;EACX,IAAIJ,UAAU,CAACK,UAAU,CAAC,MAAM,CAAC,EAAE;IACjCD,OAAO,GAAG,GAAGJ,UAAU,OAAO;EAChC,CAAC,MAAM;IACL;IACAI,OAAO,GAAG,GAAGE,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAKF,MAAM,CAACC,QAAQ,CAACE,IAAI,GAAGT,UAAU,OAAO;EACpF;EAEA,IAAIU,GAAG;EACP,IAAI;IACFA,GAAG,GAAG,IAAIC,GAAG,CAACP,OAAO,CAAC;EACxB,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAER,OAAO,EAAE,QAAQ,EAAEQ,KAAK,CAAC;IACxE,IAAId,OAAO,EAAEA,OAAO,CAAC,IAAIgB,KAAK,CAAC,gBAAgBV,OAAO,EAAE,CAAC,CAAC;IAC1D;EACF;EACAM,GAAG,CAACK,YAAY,CAACC,MAAM,CAAC,SAAS,EAAErB,OAAO,CAAC;EAC3C,IAAIC,cAAc,EAAE;IAClBc,GAAG,CAACK,YAAY,CAACC,MAAM,CAAC,mBAAmB,EAAEpB,cAAc,CAAC;EAC9D;EACA;EACA;EACA;;EAEA,MAAMqB,WAAW,GAAG,IAAIC,WAAW,CAACR,GAAG,CAACS,QAAQ,CAAC,CAAC,CAAC;EAEnDF,WAAW,CAACG,MAAM,GAAG,MAAM;IACzBP,OAAO,CAACQ,GAAG,CAAC,wBAAwB,CAAC;IACrC,IAAItB,MAAM,EAAEA,MAAM,CAAC,CAAC;EACtB,CAAC;EAEDkB,WAAW,CAACK,SAAS,GAAIC,KAAK,IAAK;IACjCV,OAAO,CAACQ,GAAG,CAAC,uBAAuB,EAAEE,KAAK,CAACC,IAAI,CAAC,CAAC,CAAC;IAClD,IAAID,KAAK,CAACC,IAAI,EAAE;MACd,IAAI;QACF,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACJ,KAAK,CAACC,IAAI,CAAC;QACnCX,OAAO,CAACQ,GAAG,CAAC,kBAAkB,EAAEI,IAAI,CAAC,CAAC,CAAC;QACvC5B,SAAS,CAAC4B,IAAI,CAAC;MACjB,CAAC,CAAC,OAAOG,CAAC,EAAE;QACVf,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEgB,CAAC,EAAE,OAAO,EAAEL,KAAK,CAACC,IAAI,CAAC;QACnE;QACA;MACF;IACF;EACF,CAAC;EAEDP,WAAW,CAACY,OAAO,GAAIC,GAAG,IAAK;IAC7BjB,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEkB,GAAG,CAAC;IAChCb,WAAW,CAACc,KAAK,CAAC,CAAC;;IAEnB;IACA,IAAIC,YAAY,GAAG,iBAAiB;IAEpC,IAAIf,WAAW,CAACgB,UAAU,KAAKf,WAAW,CAACgB,UAAU,EAAE;MACrDF,YAAY,GAAG,cAAc;IAC/B,CAAC,MAAM,IAAIf,WAAW,CAACgB,UAAU,KAAKf,WAAW,CAACiB,MAAM,EAAE;MACxDH,YAAY,GAAG,gBAAgB;IACjC,CAAC,MAAM;MACL;MACA,IAAIF,GAAG,CAACM,MAAM,IAAIN,GAAG,CAACM,MAAM,CAACH,UAAU,KAAKf,WAAW,CAACiB,MAAM,EAAE;QAC9DH,YAAY,GAAG,kBAAkB;MACnC,CAAC,MAAM;QACLA,YAAY,GAAG,gBAAgB;MACjC;IACF;IAEA,MAAMpB,KAAK,GAAG,IAAIE,KAAK,CAACkB,YAAY,CAAC;IACrC,IAAIlC,OAAO,EAAEA,OAAO,CAACc,KAAK,CAAC;EAC7B,CAAC;;EAED;EACA,OAAOK,WAAW;AACpB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}