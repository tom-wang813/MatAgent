{"ast":null,"code":"/**\n * @import {ElementContent, Root} from 'hast'\n * @import {KatexOptions} from 'katex'\n * @import {VFile} from 'vfile'\n */\n\n/**\n * @typedef {Omit<KatexOptions, 'displayMode' | 'throwOnError'>} Options\n */\n\nimport { fromHtmlIsomorphic } from 'hast-util-from-html-isomorphic';\nimport { toText } from 'hast-util-to-text';\nimport katex from 'katex';\nimport { SKIP, visitParents } from 'unist-util-visit-parents';\n\n/** @type {Readonly<Options>} */\nconst emptyOptions = {};\n/** @type {ReadonlyArray<unknown>} */\nconst emptyClasses = [];\n\n/**\n * Render elements with a `language-math` (or `math-display`, `math-inline`)\n * class with KaTeX.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns\n *   Transform.\n */\nexport default function rehypeKatex(options) {\n  const settings = options || emptyOptions;\n\n  /**\n   * Transform.\n   *\n   * @param {Root} tree\n   *   Tree.\n   * @param {VFile} file\n   *   File.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree, file) {\n    visitParents(tree, 'element', function (element, parents) {\n      const classes = Array.isArray(element.properties.className) ? element.properties.className : emptyClasses;\n      // This class can be generated from markdown with ` ```math `.\n      const languageMath = classes.includes('language-math');\n      // This class is used by `remark-math` for flow math (block, `$$\\nmath\\n$$`).\n      const mathDisplay = classes.includes('math-display');\n      // This class is used by `remark-math` for text math (inline, `$math$`).\n      const mathInline = classes.includes('math-inline');\n      let displayMode = mathDisplay;\n\n      // Any class is fine.\n      if (!languageMath && !mathDisplay && !mathInline) {\n        return;\n      }\n      let parent = parents[parents.length - 1];\n      let scope = element;\n\n      // If this was generated with ` ```math `, replace the `<pre>` and use\n      // display.\n      if (element.tagName === 'code' && languageMath && parent && parent.type === 'element' && parent.tagName === 'pre') {\n        scope = parent;\n        parent = parents[parents.length - 2];\n        displayMode = true;\n      }\n\n      /* c8 ignore next -- verbose to test. */\n      if (!parent) return;\n      const value = toText(scope, {\n        whitespace: 'pre'\n      });\n\n      /** @type {Array<ElementContent> | string | undefined} */\n      let result;\n      try {\n        result = katex.renderToString(value, {\n          ...settings,\n          displayMode,\n          throwOnError: true\n        });\n      } catch (error) {\n        const cause = /** @type {Error} */error;\n        const ruleId = cause.name.toLowerCase();\n        file.message('Could not render math with KaTeX', {\n          ancestors: [...parents, element],\n          cause,\n          place: element.position,\n          ruleId,\n          source: 'rehype-katex'\n        });\n\n        // KaTeX *should* handle `ParseError` itself, but not others.\n        // it doesn’t always:\n        // <https://github.com/remarkjs/react-markdown/issues/853>\n        try {\n          result = katex.renderToString(value, {\n            ...settings,\n            displayMode,\n            strict: 'ignore',\n            throwOnError: false\n          });\n        } catch {\n          // Generate similar markup if this is an other error.\n          // See: <https://github.com/KaTeX/KaTeX/blob/5dc7af0/docs/error.md>.\n          result = [{\n            type: 'element',\n            tagName: 'span',\n            properties: {\n              className: ['katex-error'],\n              style: 'color:' + (settings.errorColor || '#cc0000'),\n              title: String(error)\n            },\n            children: [{\n              type: 'text',\n              value\n            }]\n          }];\n        }\n      }\n      if (typeof result === 'string') {\n        const root = fromHtmlIsomorphic(result, {\n          fragment: true\n        });\n        // Cast as we don’t expect `doctypes` in KaTeX result.\n        result = /** @type {Array<ElementContent>} */root.children;\n      }\n      const index = parent.children.indexOf(scope);\n      parent.children.splice(index, 1, ...result);\n      return SKIP;\n    });\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}